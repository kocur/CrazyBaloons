package com.example.projtest;

import java.io.IOException;
import java.util.Random;

import org.andengine.audio.music.Music;
import org.andengine.audio.music.MusicFactory;
import org.andengine.audio.sound.Sound;
import org.andengine.audio.sound.SoundFactory;
import org.andengine.engine.Engine;
import org.andengine.engine.LimitedFPSEngine;
import org.andengine.engine.camera.Camera;
import org.andengine.engine.camera.hud.HUD;
import org.andengine.engine.handler.IUpdateHandler;
import org.andengine.engine.handler.timer.ITimerCallback;
import org.andengine.engine.handler.timer.TimerHandler;
import org.andengine.engine.options.EngineOptions;
import org.andengine.engine.options.ScreenOrientation;
import org.andengine.engine.options.resolutionpolicy.FillResolutionPolicy;
import org.andengine.engine.options.resolutionpolicy.RatioResolutionPolicy;
import org.andengine.entity.primitive.Rectangle;
import org.andengine.entity.scene.IOnSceneTouchListener;
import org.andengine.entity.scene.Scene;
import org.andengine.entity.scene.background.Background;
import org.andengine.entity.scene.menu.MenuScene;
import org.andengine.entity.scene.menu.MenuScene.IOnMenuItemClickListener;
import org.andengine.entity.scene.menu.item.IMenuItem;
import org.andengine.entity.scene.menu.item.SpriteMenuItem;
import org.andengine.entity.scene.menu.item.decorator.ScaleMenuItemDecorator;
import org.andengine.entity.sprite.Sprite;
import org.andengine.entity.text.Text;
import org.andengine.entity.util.FPSCounter;
import org.andengine.extension.physics.box2d.PhysicsConnector;
import org.andengine.extension.physics.box2d.PhysicsFactory;
import org.andengine.extension.physics.box2d.PhysicsWorld;
import org.andengine.input.touch.TouchEvent;
import org.andengine.opengl.font.Font;
import org.andengine.opengl.font.FontFactory;
import org.andengine.opengl.texture.TextureOptions;
import org.andengine.opengl.texture.atlas.bitmap.BitmapTextureAtlas;
import org.andengine.opengl.texture.atlas.bitmap.BitmapTextureAtlasTextureRegionFactory;
import org.andengine.opengl.texture.region.ITextureRegion;
import org.andengine.opengl.util.GLState;
import org.andengine.ui.activity.BaseGameActivity;


import org.andengine.util.adt.color.Color;


import org.andengine.util.debug.Debug;

import com.badlogic.gdx.math.Vector2;
import com.badlogic.gdx.physics.box2d.Body;
import com.badlogic.gdx.physics.box2d.BodyDef.BodyType;
import com.badlogic.gdx.physics.box2d.FixtureDef;



public class MainActivity extends BaseGameActivity{


	private mainEngine me;
	private static Scene gameScene, menuScene;
	protected static final int CAMERA_WIDTH = 800;
	protected static final int CAMERA_HEIGHT = 480;
	BitmapTextureAtlas playerTexture;
	ITextureRegion playerTexureRegion;
	PhysicsWorld physicsWorld;
	Body body;
	/*PhysicsConnector[] pc = new PhysicsConnector[numberOfBaloons];
	Sprite[] sBaloon = new Sprite[numberOfBaloons];
	Cbaloon[] baloon = new Cbaloon[numberOfBaloons];
	final FixtureDef[] PLAYER_FIX = new  FixtureDef[numberOfBaloons];*/
	//Random generator = new Random();
	HUD hud;
	static Camera mCamera;
	private Font font;
	public static final int FPS_LIMIT = 60;
	//final FPSCounter fpsCounter = new FPSCounter();
	//Text fpsText;
	private Scene splashScene;
	private Sprite splash;
	private BitmapTextureAtlas splashTextureAtlas;
    private ITextureRegion splashTextureRegion;
    static public Sound musicPop;
    static public String sceneName = null;
	@Override
	public EngineOptions onCreateEngineOptions() {
		// TODO Auto-generated method stub

		 mCamera = new Camera(0, 0, CAMERA_WIDTH, CAMERA_HEIGHT);

		EngineOptions options = new EngineOptions(true,
				ScreenOrientation.LANDSCAPE_FIXED, new FillResolutionPolicy(), mCamera);
		options.getAudioOptions().setNeedsSound(true);
		
		return options;
	}

	/*@Override
	  public Engine onCreateEngine(EngineOptions pEngineOptions) {
	    Engine engine = new LimitedFPSEngine(pEngineOptions, FPS_LIMIT);
	    return engine;
	  }*/



	@Override
	public void onCreateResources(
			OnCreateResourcesCallback pOnCreateResourcesCallback) {
		// TODO Auto-generated method stub
		 
		 
		 BitmapTextureAtlasTextureRegionFactory.setAssetBasePath("gfx/");
	        splashTextureAtlas = new BitmapTextureAtlas(this.getTextureManager(), 256, 256, TextureOptions.DEFAULT);
	        splashTextureRegion = BitmapTextureAtlasTextureRegionFactory.createFromAsset(splashTextureAtlas, this, "splash.png", 0, 0);
	        splashTextureAtlas.load();
	        
	        mainEngine.prepare(mEngine, this, mCamera, getVertexBufferObjectManager());
	        me = mainEngine.getInstance();
		// resource
		pOnCreateResourcesCallback.onCreateResourcesFinished();
	}

	

	@Override
	public void onCreateScene(OnCreateSceneCallback pOnCreateSceneCallback) {
		initSplashScene();
		
		pOnCreateSceneCallback.onCreateSceneFinished(this.splashScene);

	}

	

	
	@Override
	public void onPopulateScene(Scene pScene,
			OnPopulateSceneCallback pOnPopulateSceneCallback) {
		// TODO Auto-generated method stub
			
		mEngine.registerUpdateHandler(new TimerHandler(1f, new ITimerCallback() 
		{
            public void onTimePassed(final TimerHandler pTimerHandler) 
            {
                mEngine.unregisterUpdateHandler(pTimerHandler);
                loadGfx();
       		 	loadFonts();
       		 	loadSounds();
                loadScenes();
                
                splash.detachSelf();
                mEngine.setScene(menuScene);
                
            }
		}));
  
		pOnPopulateSceneCallback.onPopulateSceneFinished();
	}

	public void loadSounds()
	{
		SoundFactory.setAssetBasePath("mfx/");
		try {
				musicPop = SoundFactory.createSoundFromAsset(getSoundManager(), this, "WHATTHE.WAV");
			} catch (IOException e) {
				e.printStackTrace();
			}
	}
	
	public void loadFonts()
	{
		font = FontFactory.createFromAsset(this.getFontManager(), this.getTextureManager(), 256, 256, this.getAssets(),
			    "font/DigitalDream.ttf", 15, true, android.graphics.Color.BLACK);
			  font.load();
	}
	
	private void loadGfx() {
		// TODO Auto-generated method stub
		BitmapTextureAtlasTextureRegionFactory.setAssetBasePath("gfx/");
		// width and height power of 2^x
		playerTexture = new BitmapTextureAtlas(getTextureManager(), 39, 64);
		playerTexureRegion = BitmapTextureAtlasTextureRegionFactory
				.createFromAsset(playerTexture, this, "baloon.jpg", 0, 0);
		playerTexture.load();
	}
	
	/*private void addBaloons(int numberOfBaloons){
		for(int i = 0; i < numberOfBaloons; i++)
		{
			PLAYER_FIX[i] = PhysicsFactory.createFixtureDef(0.0f,
					1.0f, 0.0f);
							
			baloon[i] = new Cbaloon(sBaloon[i], playerTexureRegion, mEngine);
			sBaloon[i] = baloon[i].getSprite();
			//sPlayer.setRotation(45.0f);	
			body = PhysicsFactory.createCircleBody(physicsWorld, sBaloon[i],
					BodyType.DynamicBody, PLAYER_FIX[i]);
			this.gameScene.registerTouchArea(sBaloon[i]);
			this.gameScene.attachChild(sBaloon[i]);
			pc[i] = new PhysicsConnector(sBaloon[i],	body, true, false);
			physicsWorld.registerPhysicsConnector(pc[i]);
								
	}
	}*/


    
	private void initSplashScene()
	{
    	splashScene = new Scene();
    	splash = new Sprite(0, 0, splashTextureRegion, mEngine.getVertexBufferObjectManager())
    	{
    		@Override
            protected void preDraw(GLState pGLState, Camera pCamera) 
    		{
                super.preDraw(pGLState, pCamera);
                pGLState.enableDither();
            }
    	};
    	
    	splash.setScale(1.5f);
    	splash.setPosition((CAMERA_WIDTH - splash.getWidth()) * 0.5f, (CAMERA_HEIGHT - splash.getHeight()) * 0.5f);
    	splashScene.attachChild(splash);
	}
	
	private void loadScenes()
	{
		
		this.menuScene = new Menu(mCamera, mEngine, playerTexureRegion);
		this.gameScene = new Game(physicsWorld, hud, mCamera, mEngine, font, playerTexureRegion, body);
		
	}


	
	public void setScene(String nameScene)
	{
		if(sceneName == "menu") 
			mEngine.setScene(menuScene);
		if(sceneName == "game")
			mEngine.setScene(gameScene);
	}



	
}