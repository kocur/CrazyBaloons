package com.example.projtest;

import java.util.Random;

import org.andengine.engine.Engine;
import org.andengine.engine.LimitedFPSEngine;
import org.andengine.engine.camera.Camera;
import org.andengine.engine.camera.hud.HUD;
import org.andengine.engine.handler.IUpdateHandler;
import org.andengine.engine.options.EngineOptions;
import org.andengine.engine.options.ScreenOrientation;
import org.andengine.engine.options.resolutionpolicy.RatioResolutionPolicy;
import org.andengine.entity.primitive.Rectangle;
import org.andengine.entity.scene.IOnSceneTouchListener;
import org.andengine.entity.scene.Scene;
import org.andengine.entity.scene.background.Background;
import org.andengine.entity.sprite.Sprite;
import org.andengine.entity.text.Text;
import org.andengine.entity.util.FPSCounter;
import org.andengine.extension.physics.box2d.PhysicsConnector;
import org.andengine.extension.physics.box2d.PhysicsFactory;
import org.andengine.extension.physics.box2d.PhysicsWorld;
import org.andengine.input.touch.TouchEvent;
import org.andengine.opengl.font.Font;
import org.andengine.opengl.font.FontFactory;
import org.andengine.opengl.texture.atlas.bitmap.BitmapTextureAtlas;
import org.andengine.opengl.texture.atlas.bitmap.BitmapTextureAtlasTextureRegionFactory;
import org.andengine.opengl.texture.region.ITextureRegion;
import org.andengine.opengl.util.GLState;
import org.andengine.ui.activity.BaseGameActivity;


import org.andengine.util.adt.color.Color;
import com.badlogic.gdx.math.Vector2;
import com.badlogic.gdx.physics.box2d.Body;
import com.badlogic.gdx.physics.box2d.BodyDef.BodyType;
import com.badlogic.gdx.physics.box2d.FixtureDef;


public class GameScene extends BaseGameActivity implements IOnSceneTouchListener{


	private int numberOfBaloons = 20;
	Scene scene;
	protected static final int CAMERA_WIDTH = 800;
	protected static final int CAMERA_HEIGHT = 480;
	BitmapTextureAtlas playerTexture;
	ITextureRegion playerTexureRegion;
	PhysicsWorld physicsWorld;
	Body body;
	PhysicsConnector[] pc = new PhysicsConnector[numberOfBaloons];
	Sprite[] sBaloon = new Sprite[numberOfBaloons];
	Cbaloon[] baloon = new Cbaloon[numberOfBaloons];
	final FixtureDef[] PLAYER_FIX = new  FixtureDef[numberOfBaloons];
	Random generator = new Random();
	HUD hud;
	static Camera mCamera;
	private Font font;
	public static final int FPS_LIMIT = 60;
	final FPSCounter fpsCounter = new FPSCounter();
	Text fpsText;
	private Scene splashScene;
	private Sprite splash;

	@Override
	public EngineOptions onCreateEngineOptions() {
		// TODO Auto-generated method stub

		 mCamera = new Camera(0, 0, CAMERA_WIDTH, CAMERA_HEIGHT);

		EngineOptions options = new EngineOptions(true,
				ScreenOrientation.LANDSCAPE_FIXED, new RatioResolutionPolicy(
						CAMERA_WIDTH, CAMERA_HEIGHT), mCamera);
		return options;
	}

	@Override
	  public Engine onCreateEngine(EngineOptions pEngineOptions) {
	    Engine engine = new LimitedFPSEngine(pEngineOptions, FPS_LIMIT);
	    return engine;
	  }
	
	@Override
	public void onCreateResources(
			OnCreateResourcesCallback pOnCreateResourcesCallback) {
		// TODO Auto-generated method stub
		 loadGfx();
		 loadFonts();
		// resource
		pOnCreateResourcesCallback.onCreateResourcesFinished();
	}

	

	@Override
	public void onCreateScene(OnCreateSceneCallback pOnCreateSceneCallback) {
		initSplashScene();
		this.scene = new Scene();
		this.scene.setBackground(new Background(0, 125, 58));
		physicsWorld = new PhysicsWorld(new Vector2(10,
				-10), false);
		this.scene.registerUpdateHandler(physicsWorld);
		hud = new HUD();
		mCamera.setHUD(hud);
		fpsText = new Text(CAMERA_WIDTH-45, CAMERA_HEIGHT-15, this.font, "FPS:", "FPS: XX".length(),this.getVertexBufferObjectManager());
		
		
		createWalls();
		addBaloons(numberOfBaloons);
		
			
		this.mEngine.registerUpdateHandler(fpsCounter);
		hud.attachChild(fpsText);
		
		scene.setOnSceneTouchListener(this);
		//------------------------------------------------
		//--------------GAME LOOP-------------------------
		//------------------------------------------------
		this.scene.registerUpdateHandler(new IUpdateHandler() {                    
            public void reset() {        
            }             
            public void onUpdate(float pSecondsElapsed) {
            	//SETTING RANDOM GRAVITY
            	physicsWorld.setGravity(new Vector2((generator.nextInt(40)-20),
        				generator.nextInt(40)-20));
            	//DISPLAYING FPS
            	fpsText.setText("fps: "+(int)fpsCounter.getFPS());
            }
        });
		//------------------------------------------------
		//--------------END OF GAME LOOP------------------
		//------------------------------------------------

		pOnCreateSceneCallback.onCreateSceneFinished(this.scene);

	}

	private void createWalls() {
		// TODO Auto-generated method stub
		FixtureDef WALL_FIX = PhysicsFactory.createFixtureDef(0.0f, 0.0f, 0.0f);
		Rectangle ground = new Rectangle(400, CAMERA_HEIGHT, CAMERA_WIDTH,
				1, this.mEngine.getVertexBufferObjectManager());
		Rectangle ceil = new Rectangle(400, 0, CAMERA_WIDTH,
				1, this.mEngine.getVertexBufferObjectManager());
		Rectangle left = new Rectangle(0, 240, 1,
				CAMERA_HEIGHT, this.mEngine.getVertexBufferObjectManager());
		Rectangle right = new Rectangle(CAMERA_WIDTH, 240, 1,
				CAMERA_HEIGHT, this.mEngine.getVertexBufferObjectManager());
		
		ground.setColor(new Color(15, 50, 0));
		ceil.setColor(new Color(15, 50, 0));
		left.setColor(new Color(15, 50, 0));
		right.setColor(new Color(15, 50, 0));
		
		PhysicsFactory.createBoxBody(physicsWorld, ground, BodyType.StaticBody,
				WALL_FIX);
		PhysicsFactory.createBoxBody(physicsWorld, ceil, BodyType.StaticBody,
				WALL_FIX);
		PhysicsFactory.createBoxBody(physicsWorld, left, BodyType.StaticBody,
				WALL_FIX);
		PhysicsFactory.createBoxBody(physicsWorld, right, BodyType.StaticBody,
				WALL_FIX);
		
		this.scene.attachChild(ground);
		this.scene.attachChild(ceil);
		this.scene.attachChild(left);
		this.scene.attachChild(right);
	}

	
	@Override
	public void onPopulateScene(Scene pScene,
			OnPopulateSceneCallback pOnPopulateSceneCallback) {
		// TODO Auto-generated method stub
		
		
		
		pOnPopulateSceneCallback.onPopulateSceneFinished();
	}

	public void loadFonts()
	{
		font = FontFactory.createFromAsset(this.getFontManager(), this.getTextureManager(), 256, 256, this.getAssets(),
			    "font/DigitalDream.ttf", 15, true, android.graphics.Color.BLACK);
			  font.load();
	}
	
	private void loadGfx() {
		// TODO Auto-generated method stub
		BitmapTextureAtlasTextureRegionFactory.setAssetBasePath("gfx/");
		// width and height power of 2^x
		playerTexture = new BitmapTextureAtlas(getTextureManager(), 39, 64);
		playerTexureRegion = BitmapTextureAtlasTextureRegionFactory
				.createFromAsset(playerTexture, this, "baloon.jpg", 0, 0);
		playerTexture.load();
	}
	
	private void addBaloons(int numberOfBaloons){
		for(int i = 0; i < numberOfBaloons; i++)
		{
			PLAYER_FIX[i] = PhysicsFactory.createFixtureDef(0.0f,
					1.0f, 0.0f);
							
			baloon[i] = new Cbaloon(sBaloon[i], playerTexureRegion, mEngine);
			sBaloon[i] = baloon[i].getSprite();
			//sPlayer.setRotation(45.0f);	
			body = PhysicsFactory.createCircleBody(physicsWorld, sBaloon[i],
					BodyType.DynamicBody, PLAYER_FIX[i]);
			this.scene.registerTouchArea(sBaloon[i]);
			this.scene.attachChild(sBaloon[i]);
			pc[i] = new PhysicsConnector(sBaloon[i],	body, true, false);
			physicsWorld.registerPhysicsConnector(pc[i]);
								
	}
	}

	@Override
	public boolean onSceneTouchEvent(Scene pScene, TouchEvent pSceneTouchEvent) {
		// TODO Auto-generated method stub

		return false;
	}
    
	private void initSplashScene()
	{
    	splashScene = new Scene();
    	splash = new Sprite(400, 240, playerTexureRegion, mEngine.getVertexBufferObjectManager())
    	{
    		@Override
            protected void preDraw(GLState pGLState, Camera pCamera) 
    		{
                super.preDraw(pGLState, pCamera);
                pGLState.enableDither();
            }
    	};
    	
    	splash.setScale(1.5f);
    	splash.setPosition((CAMERA_WIDTH - splash.getWidth()) * 0.5f, (CAMERA_HEIGHT - splash.getHeight()) * 0.5f);
    	splashScene.attachChild(splash);
	}
	
}